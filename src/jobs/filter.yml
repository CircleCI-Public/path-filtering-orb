description: >
  Continues a pipeline in the `setup` state based with static config
  and a set of pipeline parameters based on the changes in this push.

  The mapping should be a set of items like so:
  <path regular expression> <pipeline parameter> <value>

  Multiple mappings can be supplied on separate lines.

  If the regular expression matches any file changed between HEAD and
  the base revision, the pipeline parameter will be set to the
  supplied value for the setup workflow continuation. This way the
  continuation config can be filtered to only perform relevant tasks.

docker:
  - image: 'cimg/python:3.8'

resource_class: << parameters.resource_class >>

parameters:
  base-revision:
    type: string
    default: "main"
    description: >
      The revision to compare the current one against for the purpose
      of determining changed files.
  mapping:
    type: string
    default: ""
    description: >
      Mapping of path regular expressions to pipeline parameters and
      values. One mapping per line, whitespace-delimited.
  config-path:
    type: string
    default: ".circleci/continue_config.yml"
    description: >
      The location of the config to continue the pipeline with.
  circleci_domain:
    type: string
    description: "The domain of the CircleCI installation - defaults to circleci.com. (Only necessary for CircleCI Server users)"
    default: "circleci.com"
  workspace_path:
    type: string
    description: "Path to attach the workspace to"
    default: ""
  resource_class:
    type: string
    description: "Resource class to use"
    default: "small"

steps:
  - when:
      condition:
        not:
          equal: [ "", << parameters.workspace_path >> ]
      steps:
        - attach_workspace:
            at: << parameters.workspace_path >>
  - checkout
  - run:
      environment:
        BASE_REVISION: << parameters.base-revision >>
        MAPPING: << parameters.mapping >>
        OUTPUT_PATH: /tmp/pipeline-parameters.json
      name: Set parameters
      shell: /usr/bin/env python3
      command: <<include(scripts/create_parameters.py)>>
  - continuation/continue:
      configuration_path: << parameters.config-path >>
      parameters: "/tmp/pipeline-parameters.json"
      circleci_domain: << parameters.circleci_domain >>
